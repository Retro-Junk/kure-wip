Graphics formats used by the game

The game uses three major formats for its graphics: palettes, splashes, sprites and cursors.
Palettes define actual colors used for all other graphics resources.
Splashes are full-screen images used for intro, language selection or playfield background. Typically stored in platform-native framebuffer format.
Sprites are heavily used for all ingame graphics, including room's background decorations. Sprites also support transparency.
Cursors are special kind of sprites used for the mouse pointer cursor. They support transparency and recoloring.

In order to speed-up drawing all graphics resources typically stored in platform-specific formats, following underlying hardware organization.


1. Amiga
1.1 Amiga palettes
A palette defines mapping of color index to its actual R-G-B representation. Amiga uses 4 bits per color component precision, so single palette
entry occupy 4+4+4 bits. Actual entry is stored as a 16-bits big-endian word, where upper 4 bits are unused.
color = 0000'RRRR'GGGG'BBBB
Game uses 16-color palettes, where color 0 is black/transparent, next 5 may be dynamically selected from 20 predefined sets
and remaining 10 colors are static.
All game's palettes hardcoded in the executable file.

1.2 Amiga splashes
Files: DRAP.BIN, FOND.BIN, PRES.BIN
Stored in plain Amiga framebuffer format.
Data is made of four bitplanes, where each plane encodes single bit of individual pixels. Combined together they form 4 bits of pixel's color index.
Pixels stored starting from most signigicant bit of a plane, plane 0 holds least significant bit of index. Plane size is 320 * 200 / 8 bytes.

data  = plane[4]
plane = bits[width/8]


1.3 Amiga sprites
Files: SPRIT.BIN, A.BIN, B.BIN
Sprites are packages in w-banks. See bank description #X.
Stored as byte for height and packed width (real width divided by 4) followed by big-endian words of data. Each word encodes 4 bitplanes of 4 pixels,
following the same bits packing rules as used for splashes.

sprite = h, pw, data[]
data   = word[w / 2 * h]
word   = plane[4]
plane  = bits[4]

1.4 Amiga cursors
Files: SOURI.BIN
TODO


2. Atari
2.1 Atari palettes
Atari uses 3 bits per color component precision, so single palette entry occupy 3+3+3 bits. Actual entry is stored as a 16-bits big-endian word,
where upper 4 bits are unused.

color = 0000'0RRR'0GGG'0BBB

Game uses 16-color palettes, where color 0 is black/transparent, next 5 may be dynamically selected from 20 predefined sets
and remaining 10 colors are static.
Dynamic color sets are hardcoded in the executable file, static colors initialized from splashes (DRAP.BIN)

2.2 Atari splashes
Files: DRAP.PI1, FOND.PI1, PRES.PI1
Stored in Low-res Degas Pro format.
Data starts with word type, followed by 16 words of palette, then planar pixels data. Pixels data stored the same way as Amiga sprites data,
but in groups of 16 pixels instead of 4.

file = type, colors[16], data
type = word (0 - low-res 320x200x16 image)
data = pack[320*200 / 16 * 4]
pack = plane[4]
plane = bits[16]

2.3 Atari sprites
Files: SPRIT.BIN, PERSO.BIN
Stored the same way as Amiga sprites.

2.4 Atari cursors
Files: SOURI.BIN
TODO


3. PC CGA/Hercules
CGA and Hercules data stored in same format and Hercules' double-width resolution is exploited to achieve dithering effect by showing 2-bit CGA
color pixel as two adjacent monochrome pixels (most significant bit of CGA pixel index comes first).
3.1 CGA Palettes
CGA's standard high-intensity Black-Cyan-Magenta-White palette is used.

3.2 CGA splashes
Files: DRAP.BIN, FOND.BIN, PRES.BIN, PRESCGA.BIN
Stored in CGA-native framebuffer format. CGA uses two pages for storing even and odd scanlines respectively. Each scanline holds 320 pixels,
packed as 2-bit values, 4 pixels per byte. Pixels counted from upper two-bits slice of a byte.
Single page occupy 8192 bytes, where 8000 (= 320/4 * 200/2) are actual pixels data followed by 192 bytes of padding.

3.3 CGA sprites
Files: SPRIT.BIN, PERS1.BIN, PERS2.BIN
Sprites are packages in w-banks. See bank description #X.
Unlike other formats that explicitly use color 0 for transparency, CGA sprites may use additional bitmask that tells if a particular pixel
with color 0 is transparent or not.
Data is stored as byte for packed width (real width divided by 4) and height, followed by raster data. After raster comes bitmask flag byte, which,
if non-zero, is followed by transparency bitmask.

sprite = pw, h, data[], flag[, bitmask[]]
data   = byte[w / 4 * h]
byte   = color[4]

3.4 CGA cursors
Files: SOURI.BIN
TODO


4. PC EGA
4.1 EGA palettes
A single static 16-color intermediate palette is used. The palette is hardcoded in the executable and matches default EGA palette with
color 8 replaced from dark gray to black.

4.2 EGA splashes
Files: FOND.EGA, PRESEGA.EGA
Identical to Amiga splashes

4.3 EGA sprites
Files: SPRIT.EGA, PERSO.EGA
Sprites are packages in w-banks. See bank description #X.
Data is stored as byte for packed width (real width divided by 4) and height, followed by pixel nibbles. Pixels are counted from top nibble of a byte.

sprite = pw, h data[]
data   = nibble[w * h]

4.4 EGA cursors
Files: SOURI.EGA
TODO


5. Tandy
TODO
